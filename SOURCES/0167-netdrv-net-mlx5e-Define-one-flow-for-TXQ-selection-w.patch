From 094a7b6bbcdb5b5ca180f1e70e7375a37d66cdb5 Mon Sep 17 00:00:00 2001
From: Alaa Hleihel <ahleihel@redhat.com>
Date: Tue, 12 May 2020 10:54:39 -0400
Subject: [PATCH 167/312] [netdrv] net/mlx5e: Define one flow for TXQ selection
 when TCs are configured

Message-id: <20200512105530.4207-74-ahleihel@redhat.com>
Patchwork-id: 306946
Patchwork-instance: patchwork
O-Subject: [RHEL8.3 BZ 1789382 073/124] net/mlx5e: Define one flow for TXQ selection when TCs are configured
Bugzilla: 1789382
RH-Acked-by: Tony Camuso <tcamuso@redhat.com>
RH-Acked-by: Kamal Heib <kheib@redhat.com>
RH-Acked-by: Jarod Wilson <jarod@redhat.com>

Bugzilla: http://bugzilla.redhat.com/1789382
Upstream: v5.7-rc1
Conflicts:
 - drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
   Context diff due to missing commit:
   a350eccee583 ("net: remove 'fallback' argument from dev->ndo_select_queue()")
   ---> We still use fallback instead of netdev_pick_tx.

commit 4229e0ea2c9936b3093990353b211bcd7802a2d5
Author: Eran Ben Elisha <eranbe@mellanox.com>
Date:   Sun Dec 8 14:29:45 2019 +0200

    net/mlx5e: Define one flow for TXQ selection when TCs are configured

    We shall always extract channel index out of the txq, regardless
    of the relation between txq_ix and num channels. The extraction is
    always valid, as if txq is smaller than number of channels,
    txq_ix == priv->txq2sq[txq_ix]->ch_ix.

    By doing so, we can remove an if clause from the select queue method,
    and have one flow for all packets.

    Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
    Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

Signed-off-by: Alaa Hleihel <ahleihel@redhat.com>
Signed-off-by: Frantisek Hrbata <fhrbata@redhat.com>
---
 drivers/net/ethernet/mellanox/mlx5/core/en_tx.c | 13 ++++++-------
 1 file changed, 6 insertions(+), 7 deletions(-)

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c b/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
index 3bfeb7c06b25..bb73d9ea131e 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
@@ -73,8 +73,8 @@ u16 mlx5e_select_queue(struct net_device *dev, struct sk_buff *skb,
 {
 	struct mlx5e_priv *priv = netdev_priv(dev);
 	int txq_ix = fallback(dev, skb, NULL);
-	u16 num_channels;
 	int up = 0;
+	int ch_ix;
 
 	if (!netdev_get_num_tc(dev))
 		return txq_ix;
@@ -87,14 +87,13 @@ u16 mlx5e_select_queue(struct net_device *dev, struct sk_buff *skb,
 		if (skb_vlan_tag_present(skb))
 			up = skb_vlan_tag_get_prio(skb);
 
-	/* txq_ix can be larger than num_channels since
-	 * dev->num_real_tx_queues = num_channels * num_tc
+	/* Normalize any picked txq_ix to [0, num_channels),
+	 * So we can return a txq_ix that matches the channel and
+	 * packet UP.
 	 */
-	num_channels = priv->channels.params.num_channels;
-	if (txq_ix >= num_channels)
-		txq_ix = priv->txq2sq[txq_ix]->ch_ix;
+	ch_ix = priv->txq2sq[txq_ix]->ch_ix;
 
-	return priv->channel_tc2realtxq[txq_ix][up];
+	return priv->channel_tc2realtxq[ch_ix][up];
 }
 
 static inline int mlx5e_skb_l2_header_offset(struct sk_buff *skb)
-- 
2.13.6

